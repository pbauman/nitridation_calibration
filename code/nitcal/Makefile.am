
include $(top_srcdir)/doxygen/aminclude.am

AUTOMAKE_OPTIONS = foreign
ACLOCAL_AMFLAGS  = -I m4 -I m4/common

SUBDIRS          = src test
EXTRA_DIST       = AUTHORS CHANGES LICENSE COPYING 

#examplesdir      = $(prefix)/examples
#examples_DATA    = $(top_srcdir)/examples/*

# Eliminate .svn directories in dist tarball
dist-hook:
	rm -rf `find $(distdir)/ -name .svn`

#if SVN_CHECKOUT
#  EXTRA_DIST     += dist_version
#
#TODO: check if dist_version is needed in BUILT_SOURCES (in addition to EXTRA_DIST)
#  BUILT_SOURCES   = dist_version
#
#dist_version: FORCE
#	@SVN_REVISION@ > $(top_srcdir)/dist_version
#
#FORCE:
#endif

# Tools in the auxiliary directory

AUX_DIST         = build-aux/install-sh
AUX_DIST        += build-aux/missing
AUX_DIST        += build-aux/config.guess
AUX_DIST        += build-aux/config.sub
AUX_DIST        += build-aux/depcomp
AUX_DIST        += build-aux/ltmain.sh

# Files to be deleted by 'make maintainer-clean'
MAINTAINERCLEANFILES = aclocal.m4                               \
                       aminclude.am                             \
                       autom4te.cache/*                         \
                       $(AUX_DIST)                              \
                       config.log                               \
                       config.status                            \
                       config.sub                               \
                       configure                                \
                       config.h                                 \
                       config.h.in                              \
                       Makefile.in                              \
                       src/Makefile.in                          \
                       test/Makefile.in                         
MAINTAINERCLEANFILES += nitcal_config.h
MAINTAINERCLEANFILES += nitcal_config.h.tmp.in
MAINTAINERCLEANFILES += _configs.sed

#MOSTLYCLEANFILES     = $(DX_CLEANFILES)

# -------------------------------------------
# Optional support for code coverage analysis
# -------------------------------------------

if CODE_COVERAGE_ENABLED

lcov_dir=$(top_builddir)/docs/html/lcov

# General philosophy is to maintain code coverage for the
# base library as generated by "make check" tests. 

lcov-report:
	@mkdir -p $(lcov_dir)

	$(top_srcdir)/src/common/lcov/lcov --compat-libtool --directory . --capture --output-file $(lcov_dir)/lcov.info
	$(top_srcdir)/src/common/lcov/lcov --list-full-path -l $(lcov_dir)/lcov.info | grep -v "`cd -P $(top_srcdir)/src && pwd`" | cut -d\| -f1 > $(lcov_dir)/remove
	$(top_srcdir)/src/common/lcov/lcov -q -r $(lcov_dir)/lcov.info `cat $(lcov_dir)/remove` > $(lcov_dir)/lcov.cleaned.info
	@rm $(lcov_dir)/remove
	@mv $(lcov_dir)/lcov.cleaned.info $(lcov_dir)/lcov.info
	$(top_srcdir)/src/common/lcov/genhtml -t "thermocouple" -o $(lcov_dir) $(lcov_dir)/lcov.info

lcov-reset:
	@rm -rf $(lcov_dir)
	@find . -name "*.gcda" -exec rm {} \;
	$(top_srcdir)/src/common/lcov/lcov --directory . --zerocounters

coverage: lcov-reset check lcov-report

endif
